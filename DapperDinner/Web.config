<?xml version="1.0" encoding="utf-8"?>
<!--
	For more information on how to configure your ASP.NET application, please visit
	http://go.microsoft.com/fwlink/?LinkId=152368
	-->
<configuration>
	<configSections>
		<sectionGroup name="elmah">
			<section name="security" requirePermission="false" type="Elmah.SecuritySectionHandler, Elmah" />
			<section name="errorLog" requirePermission="false" type="Elmah.ErrorLogSectionHandler, Elmah" />
			<section name="errorMail" requirePermission="false" type="Elmah.ErrorMailSectionHandler, Elmah" />
			<section name="errorFilter" requirePermission="false" type="Elmah.ErrorFilterSectionHandler, Elmah" />
		</sectionGroup>
		<section name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection" requirePermission="false" allowLocation="true" />
	</configSections>
	<connectionStrings>
		<add name="ApplicationServices" connectionString="data source=.\SQLEXPRESS2008;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|aspnetdb.mdf;User Instance=true" providerName="System.Data.SqlClient" />
		<add name="NerdDinners" connectionString="data source=.\SQLEXPRESS2008;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|NerdDinner.mdf;User Instance=true;MultipleActiveResultSets=True" providerName="System.Data.SqlClient" />
	</connectionStrings>
	<appSettings>
		<!-- Fill in your various consumer keys and secrets here to make the sample work. -->
		<!-- You must get these values by signing up with each individual service provider. -->
		<!-- Twitter sign-up: https://twitter.com/oauth_clients -->
		<add key="twitterConsumerKey" value="" />
		<add key="twitterConsumerSecret" value="" />
		<add key="ClientValidationEnabled" value="true" />
		<add key="UnobtrusiveJavaScriptEnabled" value="true" />
		<add key="ipInfoDbKey" value="9742e62afd81cdbc5d814f735aa5e437ddb6b0b7f34d6c6f424be6e4320106f8" />
		<add key="BingMapsKey" value="Au24T_CderRB2l0rexU6WtGzWAS0gYV1pY2NjkY6Bf2vxV5y9TVYFpMFej6jFBmI" />
	</appSettings>
	<system.web>
		<compilation debug="true" targetFramework="4.0">
			<assemblies>
				<add assembly="System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
				<add assembly="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
				<add assembly="System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
				<add assembly="System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
				<add assembly="System.Web.WebPages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
				<add assembly="System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
			</assemblies>
		</compilation>
		<authentication mode="Forms">
			<forms loginUrl="~/Account/LogOn" timeout="2880" />
		</authentication>
		<membership defaultProvider="AspNetSqlMembershipProvider">
			<providers>
				<clear />
				<add name="AspNetSqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" connectionStringName="ApplicationServices" enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false" passwordFormat="Hashed" maxInvalidPasswordAttempts="5" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10" passwordStrengthRegularExpression="" applicationName="/" />
			</providers>
		</membership>
		<profile defaultProvider="AspNetSqlProfileProvider">
			<providers>
				<clear />
				<add name="AspNetSqlProfileProvider" type="System.Web.Profile.SqlProfileProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" connectionStringName="ApplicationServices" applicationName="/" />
			</providers>
		</profile>
		<customErrors mode="RemoteOnly" defaultRedirect="/Dinners/Trouble">
			<error statusCode="404" redirect="/Dinners/Lost" />
		</customErrors>
		<machineKey validationKey="5A354895F358B1538BD42EAD6BD7D8ED08261BF0B460C5F9FC1E5E45486DA07C4524A3EEF53F288F969D1DD9574345D2111D6A5A53AD5FC90CD40964BBB421C5" decryptionKey="70CFEEDECCFBB4A3B7958AECC40D621E457DB8DCA35C92C178600F86E40E9404" validation="SHA1" decryption="AES" />
		<pages>
			<namespaces>
				<add namespace="System.Web.Helpers" />
				<add namespace="System.Web.Mvc" />
				<add namespace="System.Web.Mvc.Ajax" />
				<add namespace="System.Web.Mvc.Html" />
				<add namespace="System.Web.Routing" />
				<add namespace="System.Web.WebPages" />
			</namespaces>
		</pages>
		<httpModules>
			<add name="ErrorLog" type="Elmah.ErrorLogModule, Elmah" />
			<add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" />
			<add name="ErrorFilter" type="Elmah.ErrorFilterModule, Elmah" />
		</httpModules>
		<httpHandlers>
			<add verb="POST,GET,HEAD" path="elmah.axd" type="Elmah.ErrorLogPageFactory, Elmah" />
		</httpHandlers>
		<trace enabled="true" requestLimit="10" pageOutput="false" traceMode="SortByTime" localOnly="true" />
		<sessionState mode="InProc"></sessionState>
	</system.web>
	<system.webServer>
		<validation validateIntegratedModeConfiguration="false" />
		<modules runAllManagedModulesForAllRequests="true">
			<add name="ErrorLog" type="Elmah.ErrorLogModule, Elmah" preCondition="managedHandler" />
			<add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" preCondition="managedHandler" />
			<add name="ErrorFilter" type="Elmah.ErrorFilterModule, Elmah" preCondition="managedHandler" />
		</modules>
		<handlers>
			<add name="Elmah" verb="POST,GET,HEAD" path="elmah.axd" type="Elmah.ErrorLogPageFactory, Elmah" preCondition="integratedMode" />
		</handlers>
	</system.webServer>
	<runtime>
		<legacyHMACWarning enabled="0" />
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
	<elmah>
		<errorLog type="Elmah.XmlFileErrorLog, Elmah" logPath="~/Logs" />
	</elmah>
	<dotNetOpenAuth>
		<webResourceUrlProvider type="DapperDinner.Services.EmbeddedResourceUrlService, DapperDinner" />
		<openid>
			<relyingParty>
				<behaviors>
					<add type="DotNetOpenAuth.OpenId.Behaviors.AXFetchAsSregTransform, DotNetOpenAuth" />
				</behaviors>
				<security requireSsl="false">
					<!-- Uncomment the trustedProviders tag if your relying party should only accept positive assertions from a closed set of OpenID Providers. -->
					<!--<trustedProviders rejectAssertionsFromUntrustedProviders="true">
						<add endpoint="https://www.google.com/accounts/o8/ud" />
					</trustedProviders>-->
				</security>
			</relyingParty>
		</openid>
		<messaging>
			<untrustedWebRequest>
				<whitelistHosts>
					<!-- Uncomment to enable communication with localhost (should generally not activate in production!) -->
					<!--<add name="localhost" />-->
				</whitelistHosts>
			</untrustedWebRequest>
		</messaging>
		<reporting enabled="true" />
	</dotNetOpenAuth>
	<uri>
		<!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
			 which is necessary for OpenID urls with unicode characters in the domain/host name. 
			 It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
		<idn enabled="All" />
		<iriParsing enabled="true" />
	</uri>
	<system.net>
		<defaultProxy enabled="true" />
		<settings>
			<!-- This setting causes .NET to check certificate revocation lists (CRL) 
					 before trusting HTTPS certificates.  But this setting tends to not 
					 be allowed in shared hosting environments. -->
			<!--<servicePointManager checkCertificateRevocationList="true"/>-->
		</settings>
	</system.net>
	<system.serviceModel>
		<serviceHostingEnvironment multipleSiteBindingsEnabled="true" aspNetCompatibilityEnabled="true" />
	</system.serviceModel>
</configuration>